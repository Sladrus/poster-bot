const userService = require('../service/user-service');

const chats = [
  {
    link: 'https://t.me/hawalarussia',
    name: '–û–±–º–µ–Ω –¥–µ–Ω–µ–≥ –≤ –ö–∏–ø—Ä–µ üá®üáæ ‚Äî –∫–∞—Ä—Ç—ã, –∫—Ä–∏–ø—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ',
    id: -1001640835957,
  },
  {
    link: 'https://t.me/+ynjVgAYGN4RmYjIy',
    name: '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã / –ö—Ä–∏–ø—Ç–∞ / –†–§ –∏ –ï–≤—Ä–æ–ø–∞',
    id: -1001720069478,
  },
  {
    link: 'https://t.me/+QBlHiEO5pUY2OTli',
    name: '–û–±–º–µ–Ω –î—É–±–∞–π / AED / USD / RUB / –ö—Ä–∏–ø—Ç–∞ USDT / –í–∞–ª—é—Ç–∞ ',
    id: -1001649865487,
  },
];

async function acceptMessage(bot, query) {
  console.log(query);
  const id = query.data.split('_')[1];
  const username = query.data.split('_')[2];
  const chat = chats[Number(query.data.split('_')[3])];
  const message = query.message?.text.split(':', 2)[1];
  const type = query.message?.text.split(':', 2)[0].includes('–ü–û–ö–£–ü–ö–ê')
    ? '#–∫—É–ø–ª—é'
    : '#–ø—Ä–æ–¥–∞–º';
  try {
    await bot.answerCallbackQuery(query.id, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ');
    await bot.editMessageReplyMarkup(
      { inline_keyboard: [] },
      { chat_id: query.message.chat.id, message_id: query.message.message_id }
    );
    await bot.sendMessage(
      chat.id,
      `${type}${message}\n\n–ö–æ–Ω—Ç–∞–∫—Ç: @${username}`
    );
    await bot.sendMessage(
      id,
      `–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ ${chat.link}`
    );
    const currentTime = Date.now();
    console.log(currentTime);
    await userService.update(id, currentTime);
  } catch (e) {
    console.log(e);
  }
}

async function dismissMessage(bot, query) {
  const id = query.data.split('_')[1];
  const message = query.message;
  try {
    await bot.answerCallbackQuery(query.id, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ');
    await bot.deleteMessage(message.chat.id, message.message_id);
    await bot.sendMessage(
      id,
      `–í–∞—à–µ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∞–µ—Ç –æ–¥–Ω–æ –∏–∑ –ø—Ä–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –∏–∑—É—á–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –Ω–∏–º–∏.`
    );
  } catch (e) {
    console.log(e);
  }
}

async function banMessage(bot, query) {
  const id = query.data.split('_')[1];

  const message = query.message;
  try {
    await bot.answerCallbackQuery(query.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    await bot.deleteMessage(message.chat.id, message.message_id);
    await bot.sendMessage(
      id,
      `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`
    );
    await userService.ban(id);
  } catch (e) {
    console.log(e);
  }
}

async function chooseChat(bot, query) {
  const type = query.data === 'buyMessage' ? 'buy' : 'sell';
  const message = query.message;
  const inline_keyboard = [
    [
      {
        text: '–û–±–º–µ–Ω –¥–µ–Ω–µ–≥ –≤ –ö–∏–ø—Ä–µ üá®üáæ ‚Äî –∫–∞—Ä—Ç—ã, –∫—Ä–∏–ø—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ',
        callback_data: 'chat_0_' + type,
      },
    ],
    [
      {
        text: '–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã / –ö—Ä–∏–ø—Ç–∞ / –†–§ –∏ –ï–≤—Ä–æ–ø–∞',
        callback_data: 'chat_1_' + type,
      },
    ],
    [
      {
        text: '–û–±–º–µ–Ω –î—É–±–∞–π / AED / USD / RUB / –ö—Ä–∏–ø—Ç–∞ USDT / –í–∞–ª—é—Ç–∞',
        callback_data: 'chat_2_' + type,
      },
    ],
  ];
  try {
    await bot.answerCallbackQuery(query.id);
    await bot.sendMessage(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', {
      reply_markup: {
        inline_keyboard,
      },
    });
  } catch (e) {
    console.log(e);
  }
}

async function getMessage(bot, query) {
  const chat = query.data.split('_')[1];
  const type =
    query.data.split('_')[2] == 'buy' ? 'üü¢ –ü–û–ö–£–ü–ö–ê üü¢' : 'üî¥ –ü–†–û–î–ê–ñ–ê üî¥';
  const text =
    query.data.split('_')[2] == 'buy'
      ? '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ö—É–ø–ª—é (—Å—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞) –ø–æ (–∫—É—Ä—Å –∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞) (–ª–æ–∫–∞—Ü–∏—è)\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–ö—É–ø–ª—é 10000$ –ø–æ 81 —Ä—É–± –Ω–∞ –∫–∞—Ä—Ç—É —Ç–∏–Ω—å–∫–æ—Ñ—Ñ, –°—Ç–∞–º–±—É–ª</b>'
      : '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü—Ä–æ–¥–∞–º (—Å—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞) –ø–æ (–∫—É—Ä—Å –∏ —Å–ø–æ—Å–æ–± —Ä–∞—Å—á—ë—Ç–∞) (–ª–æ–∫–∞—Ü–∏—è)\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–ü—Ä–æ–¥–∞–º 10000$ –ø–æ 81 —Ä—É–± –Ω–∞–ª–∏—á–Ω—ã–º–∏, –°—Ç–∞–º–±—É–ª</b>';
  const msg = query.message;
  await bot.sendMessage(msg.chat.id, text, { parse_mode: 'HTML' });
  const onMessage = async (message) => {
    async function checkMessage(data) {
      const userId = 408390308;
      await bot.sendMessage(
        userId,
        `${type}\n\n–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç @${message.from.username}:\n\n${message.text}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å',
                  callback_data: `acceptMessage_${message.chat.id}_${message.from.username}_${chat}`,
                },
                {
                  text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                  callback_data: `dismissMessage_${message.chat.id}`,
                },
                {
                  text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                  callback_data: `banMessage_${message.chat.id}`,
                },
              ],
            ],
          },
        }
      );
    }
    if (message.chat.id != msg.chat.id) return;
    console.log(message);
    await checkMessage(query.data);

    await bot.sendMessage(
      message.chat.id,
      `–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ`
    );
    await bot.removeListener('message', onMessage);
  };
  await bot.on('message', onMessage);
}

module.exports = async function callbackEvent(bot, query, match) {
  try {
    await bot.answerCallbackQuery(query.id);
  } catch (e) {
    console.log(e);
  }
  if (query.data.includes('acceptMessage')) {
    return await acceptMessage(bot, query);
  }
  if (query.data.includes('dismissMessage')) {
    return await dismissMessage(bot, query);
  }
  if (query.data.includes('banMessage')) {
    return await banMessage(bot, query);
  }
  if (!query.message.chat.username) {
    return await bot.sendMessage(
      query.message.chat.id,
      `–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º. –ß—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..`
    );
  }
  const userId = query.message.chat.id;
  const user = await userService.findOrCreate(query.message);
  const currentTime = Date.now();

  if (user?.lastMessage) {
    console.log(currentTime, user.lastMessage);
    // –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const timeDiff = currentTime - user?.lastMessage;
    if (timeDiff < 86400000) {
      // 1000 –º—Å * 60 —Å * 60 –º–∏–Ω * 24 —á–∞—Å–∞ = 86400000 –º—Å
      return await bot.sendMessage(
        userId,
        '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
      );
    }
  }
  if (user?.isBanned) {
    return await bot.sendMessage(
      query.message.chat.id,
      `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`
    );
  }
  if (query.data == 'buyMessage' || query.data == 'sellMessage') {
    return await chooseChat(bot, query);
  }
  if (query.data.includes('chat')) {
    return await getMessage(bot, query);
  }
};
